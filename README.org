#+TITLE: aidermacs: Aider AI Pair Programming for Emacs
#+OPTIONS: toc:2

* Introduction

Miss using [[https://cursor.sh][Cursor]] but prefer working in Emacs? Aidermacs brings Cursor-like AI-powered development to your Emacs workflow by integrating [[https://github.com/paul-gauthier/aider][Aider]], one of the most powerful open-source AI pair programming tools available. As a community-driven project, Aidermacs prioritizes the needs and preferences of Emacs users. It provides the same powerful features you'd find in Cursor:

- Top performance on the SWE Bench, solving real GitHub issues in major open source projects
- Seamless Git integration with automatic, sensible commit messages
- Support for multi-file edits in complex codebases
- Real-time file synchronization for true pair programming
- Broad language support including Python, JavaScript, TypeScript, PHP, HTML, CSS, and more
- Compatibility with leading AI models like Claude 3.5 Sonnet, DeepSeek, and GPT-4o

* Community-Driven Development

Aidermacs thrives on community involvement. We believe that the best software is built collaboratively, with input from users and contributors.  We encourage you to:

- Contribute Code:  Submit pull requests with bug fixes, new features, or improvements to existing functionality.
- Report Issues:  Let us know about any bugs, unexpected behavior, or feature requests through GitHub Issues.
- Share Ideas:  Participate in discussions and propose new ideas for making Aidermacs even better.
- Improve Documentation: Help us make the documentation clearer, more comprehensive, and easier to use.

Your contributions are essential to making Aidermacs the best AI pair programming tool for Emacs!

* Why aidermacs over aider.el?
Aidermacs begins as a fork of [[https://github.com/tninja/aider.el][aider.el]], created to offer a more Emacs-native experience while still integrating with [[https://github.com/paul-gauthier/aider][Aider]].

While =aider.el= strictly mirrors Aider's CLI behavior, =aidermacs= prioritizes Emacs workflow integration. This design philosophy allows you to harness Aider's powerful capabilities through a natural, Emacs-native coding experience.

With =aidermacs=, you get:

1. Better Support for Multiline Input
   - =aider= is primarily designed as a command-line program, where multiline input is restricted by terminal limitations.
   - Terminal-based tools require special syntax or manual formatting to handle multiline input, which can be cumbersome and unintuitive.
   - =aidermacs= eliminates these restrictions by handling multiline prompts natively within Emacs, allowing you to compose complex AI requests just like any other text input.
   - Whether you're pasting blocks of code or refining AI-generated responses, multiline interactions in =aidermacs= feel natural and seamless.

2. Smarter Syntax Highlighting
   - AI-generated code appears with proper syntax highlighting in major languages.
   - Ensures clarity and readability without additional configuration.

3. Community-Focused Development
   - =aidermacs= is actively developed and maintained by the community, incorporating user feedback and contributions.
   - We prioritize features and improvements that directly benefit Emacs users, ensuring a tool that evolves with your needs.

... and more to come ðŸš€

* Installation

 Requirements
- Emacs â‰¥ 26.1
- [[https://aider.chat/docs/install.html][Aider]]
- [[https://github.com/magit/transient][Transient]] and [[https://github.com/magit/magit][Magit]]

 With Straight
#+BEGIN_SRC emacs-lisp
(use-package aidermacs
  :straight (:host github :repo "MatthewZMD/aidermacs" :files ("aider.el"))
  :config
  (setq aider-args '("--model" "anthropic/claude-3-5-sonnet-20241022"))
  (setenv "ANTHROPIC_API_KEY" anthropic-api-key)
  (global-set-key (kbd "C-c a") 'aider-transient-menu))
#+END_SRC

 With package-vc-install
#+BEGIN_SRC emacs-lisp
(package-vc-install '(aider :url "https://github.com/MatthewZMD/aidermacs"))
#+END_SRC

 For Doom Emacs
In =packages.el=:
#+BEGIN_SRC emacs-lisp
(package! aider :recipe (:host github :repo "MatthewZMD/aidermacs" :files ("aider.el" "aider-doom.el")))
#+END_SRC

In =config.el=:
#+BEGIN_SRC emacs-lisp
(use-package aider
  :config
  (setq aider-args '("--model" "o3-mini")))
#+END_SRC

* Features

** Session Management
- Create repository-specific Aider sessions
- Switch between multiple AI sessions
- Toggle between window and frame views

** Code Operations
- Add files in read-write or read-only mode
- Refactor selected regions or functions
- Implement TODOs from comments
- Generate and fix unit tests
- Analyze and explain code

** Optional Features

 Helm Integration
For fuzzy command history searching:
#+BEGIN_SRC emacs-lisp
(use-package aider
  :straight (:host github :repo "MatthewZMD/aidermacs" :files ("aider.el" "aider-helm.el")))
#+END_SRC

** Prompt Management
Access repository-specific prompt files with =C-c a p= for organizing and reusing prompts.

* Development Workflow

1. Start an Aider session (=aider-run-aider=)
2. Add relevant files to the session
3. Implement or modify code using:
   - =aider-implement-todo= for new code
   - =aider-function-or-region-refactor= for existing code
4. Generate and run tests
5. Refine the implementation through additional prompts or manual edits
