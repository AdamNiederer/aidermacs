#+TITLE: aidermacs: Aider AI Pair Programming for Emacs
#+OPTIONS: toc:2

* Introduction

Miss using [[https://cursor.sh][Cursor]] but prefer working in Emacs? Aidermacs brings Cursor-like AI-powered development to your Emacs workflow by integrating [[https://github.com/paul-gauthier/aider][Aider]], one of the most powerful open-source AI pair programming tools available. As a community-driven project, Aidermacs prioritizes the needs and preferences of Emacs users. It provides the same powerful features you'd find in Cursor:

- Top performance on the SWE Bench, solving real GitHub issues in major open source projects
- Seamless Git integration with automatic, sensible commit messages
- Support for multi-file edits in complex codebases
- Real-time file synchronization for true pair programming
- Broad language support including Python, JavaScript, TypeScript, PHP, HTML, CSS, and more
- Compatibility with leading AI models like Claude 3.5 Sonnet, DeepSeek, and GPT-4o

* Community-Driven Development

Aidermacs thrives on community involvement. We believe that the best software is built collaboratively, with input from users and contributors.  We encourage you to:

- Contribute Code:  Submit pull requests with bug fixes, new features, or improvements to existing functionality.
- Report Issues:  Let us know about any bugs, unexpected behavior, or feature requests through GitHub Issues.
- Share Ideas:  Participate in discussions and propose new ideas for making Aidermacs even better.
- Improve Documentation: Help us make the documentation clearer, more comprehensive, and easier to use.

Your contributions are essential to making Aidermacs the best AI pair programming tool for Emacs!

* Why aidermacs over aider.el?
Aidermacs begins as a fork of [[https://github.com/tninja/aider.el][aider.el]], created to offer a more Emacs-native experience while still integrating with [[https://github.com/paul-gauthier/aider][Aider]].

While =aider.el= strictly mirrors Aider's CLI behavior, =aidermacs= prioritizes Emacs workflow integration. This design philosophy allows you to harness Aider's powerful capabilities through a natural, Emacs-native coding experience.

With =aidermacs=, you get:

1. Better Support for Multiline Input
   - =aider= is primarily designed as a command-line program, where multiline input is restricted by terminal limitations.
   - Terminal-based tools require special syntax or manual formatting to handle multiline input, which can be cumbersome and unintuitive.
   - =aidermacs= eliminates these restrictions by handling multiline prompts natively within Emacs, allowing you to compose complex AI requests just like any other text input.
   - Whether you're pasting blocks of code or refining AI-generated responses, multiline interactions in =aidermacs= feel natural and seamless.

2. Smarter Syntax Highlighting
   - AI-generated code appears with proper syntax highlighting in major languages.
   - Ensures clarity and readability without additional configuration.

3. Flexible Terminal Backend Support
   - =aidermacs= supports multiple terminal backends (comint and vterm) for better compatibility and performance
   - Easy configuration to choose your preferred terminal emulation
   - Extensible architecture for adding new backends

4. Community-Focused Development
   - =aidermacs= is actively developed and maintained by the community, incorporating user feedback and contributions.
   - We prioritize features and improvements that directly benefit Emacs users, ensuring a tool that evolves with your needs.

... and more to come ðŸš€

* Installation

*** Requirements
- Emacs â‰¥ 26.1
- [[https://aider.chat/docs/install.html][Aider]]
- [[https://github.com/magit/transient][Transient]]

*** Sample Config With Straight
#+BEGIN_SRC emacs-lisp
(use-package aidermacs
  :straight (:host github :repo "MatthewZMD/aidermacs" :files ("*.el"))
  :config
  (setq aidermacs-args '("--model" "anthropic/claude-3-5-sonnet-20241022"))
  (setenv "ANTHROPIC_API_KEY" anthropic-api-key)
  (global-set-key (kbd "C-c a") 'aidermacs-transient-menu))
#+END_SRC

*** Sample Config With Doom Emacs
#+BEGIN_SRC emacs-lisp
(package! aidermacs :recipe (:host github :repo "MatthewZMD/aidermacs" :files ("*.el")))
#+END_SRC

* Configurability

** Terminal Backend Selection
Choose your preferred terminal backend by setting =aidermacs-backend=:

#+BEGIN_SRC emacs-lisp
;; Use vterm backend (default is comint)
(setq aidermacs-backend 'vterm)
#+END_SRC

Available backends:
- =comint= (default): Uses Emacs' built-in terminal emulation
- =vterm=: Leverages vterm for better terminal compatibility

** Multiline Input Configuration
When using the comint backend, you can customize the key binding for multiline input:

#+BEGIN_SRC emacs-lisp
;; Change multiline input key (default is S-<return>)
(setq aidermacs-comint-multiline-newline-key "C-<return>")
#+END_SRC

This key allows you to enter multiple lines without sending the command to Aider. Press =RET= normally to send the command.


* Usage Guide

This section provides a step-by-step guide on how to use Aidermacs for AI-assisted pair programming in Emacs.

** 1. Start an Aidermacs Session

- Use the command =aidermacs-run-aidermacs= or press =C-c a a= (if using the default keybindings) to start an Aidermacs session.
- This will open a new buffer named =*aidermacs:your-repo-name*= where you can interact with the AI.
- If you want to use a specific AI model, you can customize the =aidermacs-args= variable in your Emacs configuration (see "Installation" section).
- You can also select a model interactively by using the =aidermacs-change-model= command or pressing =C-c a o=.

** 2. Add Files to the Session

- To provide context to the AI, you need to add relevant files to the Aidermacs session.
- You can add the current file using =aidermacs-add-current-file= or press =C-c a f=.
- To add the current file in read-only mode, use =aidermacs-current-file-read-only= or press =C-c a R=. This prevents the AI from modifying the file.
- You can add all files in the current window using =aidermacs-add-files-in-current-window= or press =C-c a w=.
- To add all files with the same suffix as the current file in the current directory, use =aidermacs-add-same-type-files-under-dir= or press =C-c a d=.
- If you are in =dired-mode=, you can add multiple marked files using =aidermacs-batch-add-dired-marked-files= or press =C-c a b=.

** 3. Interact with the AI

- Once you have added the relevant files, you can start interacting with the AI.
- You can ask general questions about the code using =aidermacs-ask-question= or press =C-c a q=.
- To ask a general question without any context, use =aidermacs-general-question= or press =C-c a Q=.
- You can also use =aidermacs-code-change= or press =C-c a c=.
- To refactor a function or region, use =aidermacs-function-or-region-refactor= or press =C-c a r=.
- To implement TODO comments, use =aidermacs-implement-todo= or press =C-c a i=.
- To explain a function or region, use =aidermacs-function-or-region-explain= or press =C-c a e=.
- To explain the symbol under the point, use =aidermacs-explain-symbol-under-point= or press =C-c a p=.
- To generate unit tests, use =aidermacs-write-unit-test= or press =C-c a U=.
- To fix a failing test, use =aidermacs-fix-failing-test-under-cursor= or press =C-c a T=.
- To have the AI continue with the last task, use =aidermacs-go-ahead= or press =C-c a y=.
- To get help on a specific command, use =aidermacs-help= or press =C-c a h=.
- To start an architectural discussion, use =aidermacs-architect-discussion= or press =C-c a t=.
- To debug an exception, use =aidermacs-debug-exception= or press =C-c a D=.
- To undo the last change made by Aidermacs, use =aidermacs-undo-last-change= or press =C-c a u=.

** 4. Send Code Blocks

- You can send code blocks to the AI using the following commands:
  - =aidermacs-send-line-or-region= or press =C-c C-n= or =C-<return>=: Sends the current line or the selected region line by line.
  - =aidermacs-send-block-or-region= or press =C-c C-c=: Sends the current block (paragraph) or the selected region as a whole.

** 5. Manage the Aidermacs Session

- You can switch to the Aidermacs buffer using =aidermacs-switch-to-buffer= or press =C-c a z= or =C-c C-z=.
- To clear the Aidermacs buffer, use =aidermacs-clear= or press =C-c a l=.
- To reset the Aidermacs session, use =aidermacs-reset= or press =C-c a s=.
- To exit the Aidermacs session, use =aidermacs-exit= or press =C-c a x=.

** 6. Prompt Files

- You can create a prompt file in the root of your Git repository to store frequently used prompts.
- Use the command =aidermacs-open-prompt-file= or press =C-c a O p= to open the prompt file.
- The prompt file is a plain text file where you can write your prompts.
- Each line in the prompt file is treated as a separate prompt.
- You can use the keybindings defined in =aidermacs-minor-mode-map= to send prompts from the prompt file to the Aidermacs session.

** 7. Keybindings

- Aidermacs provides a transient menu with keybindings for all available commands.
- To open the transient menu, use the command =aidermacs-transient-menu= or press =C-c a=.
- The transient menu shows the available commands and their corresponding keybindings.
- You can customize the keybindings in your Emacs configuration.

By following these steps, you can effectively use Aidermacs to enhance your Emacs workflow with AI-powered pair programming.
